package eu.trentorise.game.model
import eu.trentorise.game.core.Utility;

global Utility utils;
global Double walk_min;
global Double carpooling_min_km;
global Double boat_min_km;
global Double walk_max;
global Double bike_max;

rule "update 0-impact counters"
lock-on-active
when
	InputData (($walk : data["walkDistance"] != null || $bike : data["bikeDistance"] != null) &&
		($bus : data["busDistance"] == null || ((Double)$bus)==0) && 
		($train : data["trainDistance"] == null || ((Double)$train)==0) &&
		($car : data["carDistance"]==null || ((Double)$car)==0) &&
		($transit : data["transitDistance"]==null || ((Double)$transit)==0))
		$zeroImpactTrips : PointConcept(name == "ZeroImpact_Trips")
then
	Boolean incremented= new Boolean(false);
	if($walk!=null){
	if((Double) $walk >= walk_min){
		utils.log("apply \'ZeroImpact_Trips update\'");
		$zeroImpactTrips.setScore($zeroImpactTrips.getScore() + 1.0d);
		update($zeroImpactTrips);
		incremented=true;
		}
	}
	if(incremented==false && $bike!=null){
		utils.log("apply \'ZeroImpact_Trips update\'");
		$zeroImpactTrips.setScore($zeroImpactTrips.getScore() + 1.0d);
		update($zeroImpactTrips);
	}
end

rule "update walk counters"
lock-on-active
when
    InputData( $km : data["walkDistance"] != null, $km >= walk_min)
    $walkTrips : PointConcept(name == "Walk_Trips")
    $walkKm : PointConcept(name == "Walk_Km")
then
	utils.log("apply \'Walk_Trips and Walk_Km update\'");
	$walkTrips.setScore($walkTrips.getScore() + 1.0d);
	$walkKm.setScore($walkKm.getScore() + (Double) $km);
	update($walkTrips); 
	update($walkKm);
end


rule "update bike and bike sharing counters"
lock-on-active
when
    InputData( $km : data["bikeDistance"] != null, $bs : data["bikesharing"])
    $bikeTrips : PointConcept(name == "Bike_Trips")
    $bikeKm : PointConcept(name == "Bike_Km")
    $bsTrips : PointConcept(name == "BikeSharing_Trips")
    $bsKm : PointConcept(name == "BikeSharing_Km")
then
	if($bs !=null){
		if((boolean) $bs == true) {
			utils.log("apply \'BikeSharing_Trips and BikeSharing_Km update\'");
			$bsTrips.setScore($bsTrips.getScore() + 1.0d);
			$bsKm.setScore($bsKm.getScore() + (Double) $km);
			update($bsTrips); 
			update($bsKm);
		} 
	}
	utils.log("apply \'Bike_Trips and Bike_Km update\'");
	$bikeTrips.setScore($bikeTrips.getScore() + 1.0d);
	$bikeKm.setScore($bikeKm.getScore() + (Double) $km);
	update($bikeTrips); 
	update($bikeKm);
end


rule "update bus counters"
lock-on-active
when
    InputData( $km : data["busDistance"] != null)
    $busTrips : PointConcept(name == "Bus_Trips")
    $busKm : PointConcept(name == "Bus_Km")
then
	utils.log("apply \'Bus_Trips and Bus_Km update\'");
	$busTrips.setScore($busTrips.getScore() + 1.0d);
	$busKm.setScore($busKm.getScore() + (Double) $km);
	update($busTrips); 
	update($busKm);
end


rule "update train counters"
lock-on-active
when
    InputData( $km : data["trainDistance"] != null)
    $trainTrips : PointConcept(name == "Train_Trips")
    $trainKm : PointConcept(name == "Train_Km")
then
	utils.log("apply \'Train_Trips and Train_Km update\'");
	$trainTrips.setScore($trainTrips.getScore() + 1.0d);
	$trainKm.setScore($trainKm.getScore() + (Double) $km);
	update($trainTrips); 
	update($trainKm);
end

rule "update carpooling counters"
lock-on-active
when
    InputData( $km : data["carpoolingDistance"] != null,
    		   $km >= carpooling_min_km, 
    		   (data["driverTrip"] == true && data["firstPair"] == true) || data["driverTrip"] == false   
             )
    $carpoolingTrips : PointConcept(name == "Carpooling_Trips")
    $carpoolingKm : PointConcept(name == "Carpooling_Km")
    
then
	utils.log("apply \'Carpooling_Trips and Carpooling_Km update\'");
	$carpoolingTrips.setScore($carpoolingTrips.getScore() + 1.0d);
	$carpoolingKm.setScore($carpoolingKm.getScore() + (Double) $km);
	update($carpoolingTrips); 
	update($carpoolingKm);
end

rule "update car counters"
lock-on-active
when
    InputData( $km : data["carDistance"] != null)
    $carTrips : PointConcept(name == "Car_Trips")
    $carKm : PointConcept(name == "Car_Km")
then
	utils.log("apply \'Car_Trips and Car_Km update\'");
	$carTrips.setScore($carTrips.getScore() + 1.0d);
	$carKm.setScore($carKm.getScore() + (Double) $km);
	update($carTrips); 
	update($carKm);
end

rule "update no-car counters"
lock-on-active
when
	Action ($id : id == "save_itinerary")
    InputData( $km : data["carDistance"] == null, $walk : data["walkDistance"], 
    	$transit : data["transitDistance"],
    	$bus : data["busDistance"], 
    	$bike : data["bikeDistance"], 
    	$train : data["trainDistance"],
    	$carpooling : data["carpoolingDistance"],
    	$boat : data["boatDistance"])
    $noCarTrips : PointConcept(name == "NoCar_Trips")
then
	boolean isValidNoCar = false;
	if ($walk == null || (Double)$walk >= walk_min)
		isValidNoCar = true;
		
	if (isValidNoCar == false) {
		if ($bus != null && (Double)$bus > 0) 
			isValidNoCar = true;
		else if ($bike != null && (Double)$bike > 0)
			isValidNoCar = true;
		else if ($train != null && (Double)$train > 0)
			isValidNoCar = true;
		else if ($transit != null && (Double)$transit > 0)
			isValidNoCar = true;
		else if ($boat != null)
			isValidNoCar = true;
	}
	
	if($carpooling != null && (Double)$carpooling >= carpooling_min_km) {
		isValidNoCar = false;
	}
	
	if (isValidNoCar == true) {
		utils.log("apply \'NoCar_Trips update\'");
		$noCarTrips.setScore($noCarTrips.getScore() + 1.0d);
		update($noCarTrips); 
	}
end

rule "update recommendation counters"
lock-on-active
when
	Action ($id : id == "app_sent_recommandation")
	$reccomend : PointConcept(name == "Recommendations")
then
	utils.log("apply \'Recommendations update\'");
	$reccomend.setScore($reccomend.getScore() + 1.0d);
	update($reccomend); 
end

rule "update P&R counters"
lock-on-active
when
    InputData( $park : data['park'] != null)
    $PandR : PointConcept(name == "PandR_Trips")
then
	utils.log("apply \'PandR_Trips update\'");
	$PandR.setScore($PandR.getScore() + 1.0d);
	update($PandR);
end

rule "update Cable counters"
lock-on-active
when
	InputData( $km : data["transitDistance"] != null)
    $transitTrips : PointConcept(name == "Transit_Trips")
then
	utils.log("apply \'Transit_Trips update\'");
	$transitTrips.setScore($transitTrips.getScore() + 1.0d);
	update($transitTrips); 
end

rule "update boat counters"
lock-on-active
when
	InputData( $km: data["boatDistance"] != null, $km >= boat_min_km)
    $boatTrips : PointConcept(name == "Boat_Trips")
then
	utils.log("apply \'Boat_Trips update\'");
	double trips = $boatTrips.getScore();
	modify($boatTrips) { setScore(trips + 1.0); }
end